<?php

/**
 * Implements hook_entity_info().
 *
 * We are programmatically building entities here.
 */
function rescued_entity_info() {
  if ($cache = cache_get('rescued_entity_info')) {
    $return = $cache->data;
  }
  else {
    $discovery = rescued_get_discovery_client_docs();
    $return = [];
    // Build up entity info array.
    if (isset($discovery)) {
      foreach ($discovery as $name => $properties) {
        foreach ($properties['schemas'] as $resource => $schemas) {
          // Add an entity for all JSON-Schema properties.
          $resource_key = rescued_json_schema_get_resource_key($schemas['properties']);
          if (!empty($resource_key)) {
            $resource_code = $name . '_' . strtolower($resource);
            $persistent_cache_type = \Xtuple\Rescued\Controller\EntityController::CACHE_PER_USER;
            if (in_array($resource_code, xdruple_cache_entity_system_wide())) {
              $persistent_cache_type = \Xtuple\Rescued\Controller\EntityController::CACHE_PER_SYSTEM;
            }
            $return[$resource_code] = [
              'label' => t($resource),
              'resource' => $resource,
              'discovery-client' => $name,
              'json-schema' => rescued_get_single_json_schema($resource, $properties['schemas']),
              'controller class' => '\Xtuple\Rescued\Controller\EntityController',
              'api-list-callback' => 'rescued_api_resource_list',
              // @todo: call rescued_api_resource_list statically in code
              'field cache' => FALSE,
              // TODO: For development only
              'fieldable' => TRUE,
              "persistent cache" => $persistent_cache_type,
              'entity keys' => [
                'id' => $resource_key,
                'label' => $resource_key,
              ],
              'label callback' => 'entity_class_label',
              'bundle keys' => [],
              'base table' => NULL,
              'bundles' => [
                $resource_code => [
                  'label' => t($resource),
                ],
              ],
              'view modes' => [
                'full' => [
                  'label' => t('Full content'),
                  'custom settings' => FALSE,
                ],
              ],
              // Entity API properties.
              'module' => 'rescued',
              'entity class' => '\Xtuple\Rescued\Controller\Entity',
              'permission labels' => [
                'singular' => $resource,
                'plural' => $resource,
              ],
            ];

            if ($properties['schemas'][$resource]['properties'][$resource_key]['type'] === 'string') {
              $return[$resource_code]['uuid'] = TRUE;
              $return[$resource_code]['entity keys']['uuid'] = $resource_key;
            }

            // Augment the JSON-Schema entities that are also a resource.
            // These are the main entities that have a UI.
            if (isset($properties['resources'][$resource])) {
              // Generic callback: one less callback to define.
              $return[$resource_code]['resource-methods'] = $properties['resources'][$resource]['methods'];
            }
            else {
              // The 'is_nested_only' resources are not exposed by the REST API and must be accessed by through their parent.
              $return[$resource_code]['is_nested_only'] = TRUE;
            }
          }
        }
      }
      cache_set('rescued_entity_info', $return);
    }
  }

  return $return;
}

/**
 * Check if the resources exist yet. This function can be called to ensure the
 * entities you need are loaded before preforming any action. It is useful to
 * prevent errors during install and cache refreshing.
 *
 * @param array $resources
 *   An array of resource names.
 *
 * @return boolean
 *   True if all resources in the array exist.
 */
function rescued_resources_exist($resources) {
  $client = rescued_api_get_client();
  foreach ($resources as $resource_name) {
    if ($client->resource($resource_name) === NULL) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Implements hook_entity_property_info().
 */
function rescued_entity_property_info() {
  $discovery = rescued_get_discovery_client_docs();

  $info = [];

  // Build up info properties array for each resource entity.
  if (isset($discovery)) {
    foreach ($discovery as $name => $resources) {
      foreach ($resources['schemas'] as $resource => $properties) {
        foreach ($properties['properties'] as $key => $value) {
          if (isset($value['type'])) {
            $format = isset($value['format']) ? $value['format'] : NULL;
            $type = rescued_json_schema_to_data_type($value['type'], $format);
          }
          else {
            $type = 'text';
          }
          $info[$name . '_' . strtolower($resource)]['properties'][$key] = [
            'description' => t(isset($value['comment']) ? $value['comment'] : ""),
            'label' => t($value['title']),
            'required' => isset($value['required']) ? $value['required'] : FALSE,
            'type' => $type,
          ];

          // Our dates come in as JavaScript dates. Need to define getter and setter callbacks that will convert them to timestamps.
          if ($type === 'date') {
            $info[$name . '_' . strtolower($resource)]['properties'][$key]['getter callback'] = 'entity_property_verbatim_date_get';
            // TODO: There is no set function for date.  Add a custom one.
            // @See: contrib/entity/includes/entity.property.inc, line 410
            // Currently this doesn't seem to be needed because our forms use 'Y-m-d'.
            // The getter is needed so views can use a date widget.
          }
        }
      }
    }
  }

  return $info;
}

/**
 * Implements hook_field_extra_fields().
 */
function rescued_field_extra_fields() {
  $discovery = rescued_get_discovery_client_docs();

  $extra = [];
  $handled_properties = [];

  // Build up entity fields array.
  if (isset($discovery)) {
    $created_fields = [];
    $erp_fields = [];

    // Get all of the default 'erp_xxx' fields so we can delete invalid ones below.
    $xd_ref_fields = field_read_fields(['type' => 'xdruple_entityreference']);

    // Loop over and find 'erp_xxx' fields.
    foreach ($xd_ref_fields as $field_key => $field) {
      if (substr($field_key, 0, 4) === 'erp_') {
        $erp_fields[] = $field_key;
      }
    }

    foreach ($discovery as $name => $resources) {
      $handled_properties[$name] = [];

      // Allow modules to register as a create_child_fields handler for a $resource[$property].
      drupal_alter('rescued_handle_create_child_fields', $handled_properties);

      foreach ($resources['schemas'] as $resource => $properties) {
        foreach ($properties['properties'] as $key => $value) {
          // Set weight based on type.
          if (isset($value['$ref']) && strpos($value['$ref'], '/') === FALSE) {
            // Handle toOne nested relations.

            $cardinality = 1;
            $weight = 20;
            $child = $value['$ref'];
            $new_field = rescued_create_child_fields($name, $resource, $key, $child, $value['title'], $cardinality, $weight, $handled_properties);
            if (!empty($new_field)) {
              $created_fields[] = $new_field;
            }
          }
          elseif ((isset($value['items']) && isset($value['items']['$ref']) &&
            strpos($value['items']['$ref'], '/') === FALSE)
          ) {
            // Handle toMany nested relations.

            $cardinality = FIELD_CARDINALITY_UNLIMITED;
            $weight = 10;
            $child = $value['items']['$ref'];
            $new_field = rescued_create_child_fields($name, $resource, $key, $child, $value['title'], $cardinality, $weight, $handled_properties);
            if (!empty($new_field)) {
              $created_fields[] = $new_field;
            }

            $extra[$name . '_' . strtolower($resource)][$name . '_' . strtolower($resource)]['display'][$key] = [
              'description' => t(isset($value['comment']) ? $value['comment'] : ""),
              'label' => t($value['title']),
              'weight' => $weight,
            ];
            $extra[$name . '_' . strtolower($resource)][$name . '_' . strtolower($resource)]['form'][$key] = [
              'description' => t(isset($value['comment']) ? $value['comment'] : ""),
              'label' => t($value['title']),
              'weight' => $weight,
            ];
          }
          elseif (isset($value['items']) && isset($value['items']['$ref']) &&
            strpos($value['items']['$ref'], '/') !== FALSE
          ) {
            // Handle toMany key relations.

            $cardinality = FIELD_CARDINALITY_UNLIMITED;
            $weight = 30;
            $child = strtolower(array_shift(explode('/', $value['items']['$ref'], 2)));
            $new_field = rescued_create_child_fields($name, $resource, $key, $child, $value['title'], $cardinality, $weight, $handled_properties);
            if (!empty($new_field)) {
              $created_fields[] = $new_field;
            }

            $extra[$name . '_' . strtolower($resource)][$name . '_' . strtolower($resource)]['display'][$key] = [
              'description' => t(isset($value['comment']) ? $value['comment'] : ""),
              'label' => t($value['title']),
              'weight' => $weight,
            ];
            $extra[$name . '_' . strtolower($resource)][$name . '_' . strtolower($resource)]['form'][$key] = [
              'description' => t(isset($value['comment']) ? $value['comment'] : ""),
              'label' => t($value['title']),
              'weight' => $weight,
            ];
          }
          else {
            $weight = -40;

            $extra[$name . '_' . strtolower($resource)][$name . '_' . strtolower($resource)]['display'][$key] = [
              'description' => t(isset($value['comment']) ? $value['comment'] : ""),
              'label' => t($value['title']),
              'weight' => $weight,
            ];
            $extra[$name . '_' . strtolower($resource)][$name . '_' . strtolower($resource)]['form'][$key] = [
              'description' => t(isset($value['comment']) ? $value['comment'] : ""),
              'label' => t($value['title']),
              'weight' => $weight,
            ];
          }
        }
      }
    }

    // Delete invalid erp_xxx fields.
    foreach ($erp_fields as $erp_field_name) {
      if (!in_array($erp_field_name, $created_fields)) {
        field_delete_field($erp_field_name);
      }
    }
    // Purge 'erp_xxx' fields.
    field_purge_batch(100);
  }

  return $extra;
}

/**
 * Creates fields for child relations on rescued entities.
 *
 * @param string  $name
 *  Name of rescued client.
 *
 * @param string  $resource
 *  Name of rescued client resource.
 *
 * @param string  $property
 *  Name of resource property.
 *
 * @param string  $child
 *  The child resource name.
 *
 * @param string  $title
 *  The title of the property.
 *
 * @param integer $cardinality
 *  The cardinality of the property.
 *
 * @param integer $weight
 *  Field weight for sort order.
 *
 * @param array   $handled_properties
 *  $resource and $properties registered to be handled by another module.
 *
 * @return null|string
 */
function rescued_create_child_fields($name, $resource, $property, $child, $title, $cardinality, $weight, $handled_properties) {
  $field_name = NULL;

  // Check $resource and $property to see if it's registered to be handled by another module.
  if (isset($handled_properties[$name], $handled_properties[$name][$resource]) &&
    in_array($property, $handled_properties[$name][$resource])
  ) {

    // Let other modules handle setting up this field.
    module_invoke_all('rescued_create_child_fields', $name, $resource, $property, $child, $title, $cardinality, $weight);
  }
  else {
    // Handle default field creation for non-registered $resource[$property].
    $field_name = xdruple_entityreference_create_default_child_fields($name, $resource, $property, $child, $title, $cardinality, $weight);
  }

  return $field_name;
}

/**
 * Implements hook_entity_query_alter().
 *
 * @param $query
 */
function rescued_entity_query_alter(&$query) {
  $conditions = $query->entityConditions;

  // Alter only RESCUED module entities.
  if (isset($conditions['entity_type']) &&
    (($entityInfo = entity_get_info($conditions['entity_type']['value'])) &&
      isset($entityInfo['module']) &&
      strpos($entityInfo['module'], 'rescued') !== FALSE)
  ) {
    $query->executeCallback = 'rescued_entity_field_query_builder';
  }
}

/**
 * Override EntityFieldQuery's execute() to make queries over the REST API.
 *
 * @param EntityFieldQuery $query
 *
 * @return array REST API Query Result.
 */
function rescued_entity_field_query_builder(EntityFieldQuery $query) {
  $propertyConditions = $query->propertyConditions;
  $order = $query->order;
  $entityType = $query->entityConditions['entity_type']['value'];
  $entityInfo = entity_get_info($entityType);

  $queryParams = [];
  if (isset($propertyConditions)) {
    foreach ($propertyConditions as $queryParam) {
      if (isset($queryParam['operator']) && $queryParam['operator'] === 'IN') {
        // TODO: Need to add support for array searches. Just grabbing one value for now.
        // This gets call when saving a node with a product reference field.
        // It sends an array of product_ids.
        $queryParam['value'] = array_pop($queryParam['value']);
      }
      if (count($queryParam['column']) > 1) {
        // TODO: Should we query on each column?
        $queryParams['q'] = $queryParam['value'];
      }
      else {
        if ($queryParam['column'] === 'q') {
          $queryParams['q'] = $queryParam['value'];
        }
        else {
          // Convert query types to xTuple format.
          $type = rescued_json_schema_get_property_type($entityInfo['json-schema'][$entityInfo['resource']], $queryParam['column']);

          if ($type === 'boolean') {
            $queryParam['value'] = empty($queryParam['value']) ? FALSE : TRUE;
          }

          $queryParams['query'][] = [
            "column" => $queryParam['column'],
            "operator" => isset($queryParam['operator']) ? rescued_get_query_operator($queryParam['operator']) : 'EQUALS',
            "value" => $queryParam['value'],
          ];
        }
      }
    }
  }

  if (count($order) > 0) {
    $queryParams['orderby'] = [];

    foreach ($order as $orderby) {
      if (strtolower($orderby['direction']) === 'asc') {
        $queryParams['orderby'][$orderby['specifier']] = 'ASC';
      }
      elseif (strtolower($orderby['direction']) === 'desc') {
        $queryParams['orderby'][$orderby['specifier']] = 'DESC';
      }
    }

    if (count($queryParams['orderby']) === 0) {
      unset($queryParams['orderby']);
    }
  }

  if ($query->count) {
    // Call the REST API and get a count quicker than a full load request.
    $queryParams['count'] = TRUE;
    $entityInfo = entity_get_info($entityType);
    $api_callback = $entityInfo['api-list-callback']; // @todo: call rescued_api_resource_list statically
    $count = $api_callback($entityInfo['resource'], $queryParams);

    return isset($count[0]['count']) ? $count[0]['count'] : 0;
  }

  $pager_range = [];
  if (isset($query->range, $query->range['length'], $query->range['start'])) {
    $pager_range = [
      'maxResults' => $query->range['length'],
      'pageToken' => $query->range['start'] / $query->range['length'],
    ];
  }

  $conditions = array_merge($queryParams, $pager_range);

  $entities = entity_load($entityType, FALSE, $conditions);

  $result = [
    $entityType => $entities,
  ];

  return $result;
}

/**
 * Returns the human readable name of any or all xTuple entity types.
 *
 * @param $type
 *   Optional parameter specifying the type whose name to return.
 *
 * @return array|bool
 *   Either an array of all xTuple entity type names keyed by the machine name or a
 *   string containing the human readable name for the specified type. If a
 *   type is specified that does not exist, this function returns FALSE.
 */
function rescued_type_get_name($type = NULL) {
  // Loop over discovery clients and add all $ref objects as field groups.
  $discovery = rescued_get_discovery_client_docs();

  $rescued_types = [];

  if (isset($discovery)) {
    foreach ($discovery as $name => $properties) {
      foreach ($properties['resources'] as $resource => $methods) {
        $rescued_types[$name . '_' . strtolower($resource)] = t($resource);
      }
    }

    if (!empty($type)) {
      if (isset($rescued_types[$type])) {
        return $rescued_types[$type];
      }
      else {
        // Return FALSE if it does not exist.
        return FALSE;
      }
    }
    else {
      // Return all types.
      return $rescued_types;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * @return \Xtuple\REST\Client\Configuration
 * @throws \Exception
 */
function rescued_get_configuration() {
  global $rescued_config;
  if (empty($rescued_config)) {
    throw new Exception("RESCUED configuration is not set");
  }
  return $rescued_config;
}

/**
 * Shortcut to get application name
 */
function rescued_application_name() {
  $config = rescued_get_configuration();
  return $config->applicationName();
}

/**
 * @return array
 */
function rescued_resources_list() {
  $resources = module_invoke_all("rescued_resources");
  $resources = array_unique($resources);
  sort($resources);
  return $resources;
}

/**
 * @return \Xtuple\REST\Client\Client
 * @throws \Exception
 */
function rescued_get_xtuple_rest_service() {
  $configuration = rescued_get_configuration();
  variable_set('rescued_debug_mode', $configuration->debug());
  $resources = rescued_resources_list();
  /** @var Xtuple\Xdruple\Session\RescuedSession $session */
  global $session;
  $client = new \Xtuple\REST\Client\Client($configuration, $resources, $session);
  return $client;
}

/**
 * Implements hook_rescued_resources().
 */
function rescued_rescued_resources() {
  return [
    "Model",
    "Account",
    "ContactRelation",
    "XdCustomer",
  ];
}

/**
 * Get Discovery Docs
 *
 * @return
 *   An multidimensional array of discovery docs
 */
function rescued_get_discovery_client_docs() {
  $docs = &drupal_static(__FUNCTION__);

  if (!isset($docs)) {
    $client = rescued_get_xtuple_rest_service();
    $docs["xtuple"] = $client->discovery();
    try {
      $dir = "public://schemas";
      if (file_prepare_directory($dir, FILE_MODIFY_PERMISSIONS | FILE_CREATE_DIRECTORY)) {
        foreach ($docs["xtuple"]["schemas"] as $resource => $schema) {
          $file = fopen("$dir/$resource.php", "w");
          $export = var_export($schema, TRUE);
          $export = str_replace("array (", "[", $export);
          $export = str_replace(")", "]", $export);
          $export = preg_replace("/=>\\ *\n\\ *\\[/", "=> [", $export);
          $export = str_replace("\$ref", "\\\$ref", $export);
          $export = str_replace("'", "\"", $export);
          $export = str_replace("true", "TRUE", $export);
          $export = str_replace("false", "FALSE", $export);
          $export = str_replace("null", "NULL", $export);
          fwrite($file, "<?php\n\n$export\n");
          fclose($file);
        }
      }
    } catch (\Exception $e) {
      watchdog_exception("rescued", $e);
    }
  }
  return $docs;
}

/**
 * Implements hook_flush_caches().
 *
 * Remove the folder at: /tmp/Google_Client and reset our entities loaded
 * variable and cache. This will be called when hook_menu() is called above
 * in rescued_module_implements_alter() and when all caches are flushed.
 */
function rescued_flush_caches() {
  // Clear the rescued_entity_info cache.
  cache_clear_all('rescued_entity_info', 'cache');

  // Delete Google IO cache folder from system's /tmp.
  if (variable_get('rescued_clear_google_cache', 1)) {
    global $apiConfig;
    if (file_exists($apiConfig['ioFileCache_directory'])) {
      file_unmanaged_delete_recursive($apiConfig['ioFileCache_directory']);
    }
  }
}

/**
 * Initialize a Rescued Client
 *
 * @return \Xtuple\Rescued\RescuedApiService
 * @throws \Exception
 */
function rescued_api_get_client() {
  $rescued = &drupal_static(__FUNCTION__);

  if (empty($rescued["xtuple"]["client"])) {
    $client = rescued_get_xtuple_rest_service();
    $rescued["xtuple"]["client"] = $client->service();
    $rescued["xtuple"]['prn'] = $client->config()->prn();
  }
  /** @var \Xtuple\Rescued\RescuedApiService $client */
  $client = $rescued["xtuple"]['client'];

  // Reset $oauth-prn because drupal_static's client may be stale.
  /** @var \Google_OAuth2 $auth */
  $auth = $client->client->getAuth();
  $oauth = $auth->assertionCredentials;

  if (isset($rescued["xtuple"]['prn'])) {
    $prn = $rescued["xtuple"]['prn'];
  }

  /** @var Xtuple\Xdruple\Session\RescuedSession $session */
  global $session;
  $oauth_user = NULL;

  // Set OAuth 2.0 JWT Delegated user.
  if ($role_user = $session->getRescued('user')) {
    if ((isset($_SESSION['oauth_user']) && $_SESSION['oauth_user'] !== $role_user) ||
      $oauth->prn !== $role_user
    ) {
      $oauth->prn = $role_user;
      $oauth_user = $role_user;
    }
  }
  elseif (isset($prn)) {
    if ((isset($_SESSION['oauth_user']) && $_SESSION['oauth_user'] !== $prn) ||
      $oauth->prn !== $prn
    ) {
      $oauth->prn = $prn;
      $oauth_user = $prn;
    }
  }

  // Reset AssertionCredentials so cached client has correct prn username and access token.
  if ($oauth_user !== NULL) {
    unset($_SESSION['access_token']);
    unset($_SESSION['oauth_user']);
    $auth->token = NULL;
    $_SESSION['oauth_user'] = $oauth_user;
    $client->client->setAssertionCredentials($oauth);
  }

  return $client;
}

/**
 * DELETE a REST resource.
 *
 * @param $resource_name
 * @param $id
 * @param $resource_key
 *
 * @return
 */
function rescued_api_resource_delete($resource_name, $id, $resource_key) {
  $result = [];
  $client = rescued_api_get_client();
  if ($resource_name = $client->resource($resource_name)) {
    $result = $resource_name->delete($id, $resource_key);
  }
  return $result['data'];
}

/**
 * GET a REST resource.
 *
 * @param $resource_name
 * @param $id
 * @param $resource_key
 *
 * @return array
 */
function rescued_api_resource_load($resource_name, $id, $resource_key) {
  $result = [];
  $client = rescued_api_get_client();
  if ($resource = $client->resource($resource_name)) {
    $result = $resource->get($id, $resource_key);
  }
  return $result;
}

/**
 * GET list of REST resources.
 *
 * @param string $resource_name
 * @param array  $opt_params
 * @param bool   $data_only
 *
 * @return array
 */
function rescued_api_resource_list($resource_name, $opt_params = [], $data_only = TRUE) {
  // If this is a large query and would result in a long URL, query over POST instead.
  // This will get around the "414 Request URI Too Large" error.
  // TODO: Is 500 characters too long?
  if (strlen(json_encode($opt_params)) > 500) {
    $result = rescued_api_resource_post_query($resource_name, $opt_params, FALSE);
  }
  else {
    $client = rescued_api_get_client();
    $result = [];
    if ($resource = $client->resource($resource_name)) {
      $result = $resource->resourceList($opt_params);
    }
  }

  if ($data_only) {
    return isset($result['data']) ? $result['data'] : [];
  }
  else {
    return isset($result) ? $result : [];
  }
}

/**
 * POST query for a list of REST resources.
 *
 * This function can be used to send a large query over a POST body instead of
 * constructing a really long URL that may fail with an error:
 * "414 Request URI Too Large".
 *
 * @param string  $resource         The API resource name. e.g. 'ClassCode'
 * @param array   $optParams        The structured query to perform.
 * @param boolean $data_only        Return just the data. Set to fails to get the
 *                                  full result that will include etags.
 *
 * @return array The query result response.
 */
function rescued_api_resource_post_query($resource, $optParams = [], $data_only = TRUE) {
  $client = rescued_api_get_client();

  // Build restQuery structure for the POST body.
  $postBody['attributes'] = [
    $resource,
    rescued_format_post_query_options($optParams),
  ];

  // Put all of this into the postBody where the Google lib expects it.
  $params = ['postBody' => $postBody];

  // Get the query results.
  $result = $client->Model->restQuery($params);

  if ($data_only) {
    return isset($result['data']) ? $result['data'] : [];
  }
  else {
    return isset($result) ? $result : [];
  }
}


/**
 * PATCH a REST resource.
 *
 * @param $resource_name
 * @param $id
 * @param $resource_key
 * @param $postBody
 * @param $optParams
 *
 * @return array|\Xtuple\Rescued\RescuedService
 */
function rescued_api_resource_patch($resource_name, $id, $resource_key, $postBody, $optParams) {
  $result = [];
  $client = rescued_api_get_client();
  if ($resource = $client->resource($resource_name)) {
    $result = $resource->patch($id, $resource_key, $postBody, $optParams);
  }
  return $result;
}

/**
 * POST a REST resource.
 *
 * @param $resource_name
 * @param $postBody
 * @param $optParams
 *
 * @return array|\Xtuple\Rescued\RescuedService
 */
function rescued_api_resource_insert($resource_name, $postBody, $optParams) {
  $result = [];
  $client = rescued_api_get_client();
  if ($resource_name = $client->resource($resource_name)) {
    $result = $resource_name->insert($postBody, $optParams);
  }
  return $result;
}

/**
 * Helper function to format a GET style query options for POST query requests.
 *
 * @param array $optParams The structured query to perform.
 *
 * @return array The formatted query $options.
 */
function rescued_format_post_query_options($optParams = []) {

  // Build restQuery structure for the POST body.
  $options = [];

  // Format the query.
  if (isset($optParams['query'])) {
    foreach ($optParams['query'] as $key => $value) {
      $options['query'][] = [$key => $value];
    }
    unset($optParams['query']);
  }

  // Format the orderby.
  if (isset($optParams['orderby'])) {
    foreach ($optParams['orderby'] as $key => $value) {
      $options['orderby'][] = [$key => $value];
    }
    unset($optParams['orderby']);
  }

  // Add any other query info. e.g. rowlimit, pagetoken, maxresults or count.
  foreach ($optParams as $key => $value) {
    $options[$key] = $value;
  }

  return $options;
}

/**
 * Build a JSON-Schema array for a single entity.
 *
 * @param string $resource
 * @param array  $json_schema
 * @param string $discovery_client The client name.
 *
 * @return array JSON-Schema
 */
function rescued_get_single_json_schema($resource, $json_schema = NULL, $discovery_client = NULL) {
  // Find the resource in the JSON-Schema.
  $schema = [];

  // Load the schema from the discovery doc when not passed in.
  if (is_null($json_schema) && !is_null($discovery_client)) {
    $docs = rescued_get_discovery_client_docs();
    $json_schema = $docs[$discovery_client]['schemas'];
  }

  // Add the resource's properties to the schema.
  $schema[$resource] = $json_schema[$resource];

  return $schema;
}

/**
 * Build a JSON-Schema array for an entity including all $ref's recursively.
 *
 * @param string $resource
 * @param array  $json_schema
 *
 * @return array JSON-Schema
 */
function rescued_get_recursive_json_schema($resource, $json_schema) {
  // Find the resource in the JSON-Schema.
  $schema = [];

  // Add the resource's properties to the schema.
  $schema[$resource] = $json_schema[$resource];

  // If a property is a $ref, recurse into it and add it's properties as well.
  foreach ($schema[$resource]['properties'] as $property => $values) {
    if (isset($values['$ref']) && strpos($property['$ref'], '/') === FALSE) {
      // Handle toOne relations.
      $schema = $schema + rescued_get_recursive_json_schema($values['$ref'], $json_schema);
    }
    elseif (isset($values['$ref']) && strpos($property['$ref'], '/') !== FALSE) {
      // Handle toOne key relations.
      $ref_parent = explode("/", $values['$ref']);
      $schema = $schema + rescued_get_recursive_json_schema($ref_parent[0], $json_schema);
    }
    elseif (isset($properties['items']) && isset($properties['items']['$ref']) &&
      strpos($properties['items']['$ref'], '/') === FALSE
    ) {
      // Handle toMany isNested relations.
      $schema = $schema + rescued_get_recursive_json_schema($values['items']['$ref'], $json_schema);
    }
    elseif (isset($properties['items']) && isset($properties['items']['$ref']) &&
      strpos($properties['items']['$ref'], '/') !== FALSE
    ) {
      // Handle toMany key relations.
      $ref_parent = explode("/", $values['items']['$ref']);
      $schema = $schema + rescued_get_recursive_json_schema($ref_parent[0], $json_schema);
    }
  }

  return $schema;
}

/**
 * Map JSON-Schema data types to Drupal form field types.
 *
 * @param string $type JSON-Schema data type to map.
 * @param string $format
 *
 * @return string Drupal form field type.
 */
function rescued_json_schema_to_form_type($type, $format = NULL) {
  switch (strtolower($type)) {
    case 'object':
      return 'textfield';
    case 'array':
      return 'textfield';
    case 'boolean':
      return 'checkbox';
    case 'integer':
      return 'textfield';
    case 'number':
      return 'textfield';
    case 'string':
      if (isset($format) && $format === 'date') {
        return 'date_popup';
      }
      else {
        return 'textfield';
      }
    default:
      return 'textfield';
  }
}

/**
 * Map JSON-Schema data types to Drupal entity data types.
 *
 * @param string $type JSON-Schema data type to map.
 * @param string $format
 *
 * @return string Drupal data type.
 */
function rescued_json_schema_to_data_type($type, $format = NULL) {
  switch (strtolower($type)) {
    case 'object':
      return 'entities';
    case 'array':
      return 'list';
    case 'boolean':
      return 'boolean';
    case 'integer':
      return 'integer';
    case 'number':
      return 'decimal';
    case 'string':
      if (isset($format) && $format === 'date') {
        return 'date';
      }
      else {
        return 'text';
      }
  }
  return $type;
}

/**
 * Convert Drupal's query operator string to xTuple's.
 *
 * @param string
 *     Possible values:
 *     - '=', '<>', '>', '>=', '<', '<=', 'STARTS_WITH', 'CONTAINS': These
 *     operators expect $value to be a literal of the same type as the
 *     column.
 *     - 'IN', 'NOT IN': These operators expect $value to be an array of
 *     literals of the same type as the column.
 *     - 'BETWEEN': This operator expects $value to be an array of two literals
 *     of the same type as the column.
 *
 * @return string
 *   The converted operator string.
 */
function rescued_get_query_operator($operator) {
  switch ($operator) {
    case '=':
      return 'EQUALS';
    case '<>':
      return 'NOT_EQUALS';
    case '<':
      return 'LESS_THAN';
    case '<=':
      return 'AT_MOST';
    case '>':
      return 'GREATER_THAN';
    case '>=':
      return 'AT_LEAST';
    case 'CONTAINS':
      return 'MATCHES';
    case 'STARTS_WITH':
      return 'BEGINS_WITH';
    case 'IN':
      return 'EQUALS'; // TODO: support return "ANY"
    case 'NOT IN':
      return 'EQUALS'; // TODO: support return "NOT ANY"
    case 'BETWEEN':
      return 'EQUALS'; // TODO: support return "BETWEEN"
    default:
      return $operator;
  }
}

/**
 * Get the primary/natural key for a JSON-Schema resource.
 *
 * @param array $properties JSON-Schema properties for a single resource.
 *
 * @return string Key name.
 */
function rescued_json_schema_get_resource_key($properties) {
  foreach ($properties as $key => $values) {
    if (isset($values['isKey']) && $values['isKey']) {
      return $key;
    }
  }
  return NULL;
}

/**
 * Get the property data type from the resource's JSON-Schema.
 *
 * @param array  $schema   The JSON-Schema for a single resource.
 * @param string $property The property name to get the type for.
 *
 * @return string Key name.
 */
function rescued_json_schema_get_property_type($schema, $property) {
  if (isset($schema['properties'][$property]['type'])) {
    return $schema['properties'][$property]['type'];
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_features_exclude()
 */
function rescued_features_exclude() {
  return [
    'variable' => [
      'rescued_debug_mode',
    ],
  ];
}
