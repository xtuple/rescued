<?php

/**
 * @return \Xtuple\REST\Client\Configuration
 * @throws \Exception
 */
function rescued_get_configuration() {
  global $rescued_config;
  if (empty($rescued_config)) {
    throw new Exception("RESCUED configuration is not set");
  }
  return $rescued_config;
}

/**
 * Shortcut to get application name
 */
function rescued_application_name() {
  $config = rescued_get_configuration();
  return $config->applicationName();
}

/**
 * @return \Xtuple\REST\Client\Client
 * @throws \Exception
 */
function rescued_get_xtuple_rest_service() {
  $configuration = rescued_get_configuration();
  variable_set('rescued_debug_mode', $configuration->debug());
  /** @var Xtuple\Xdruple\Session\RescuedSession $session */
  global $session;
  $client = new \Xtuple\REST\Client\Client($configuration, $session);
  return $client;
}

/**
 * Get Discovery Docs
 *
 * @return
 *   An multidimensional array of discovery docs
 */
function rescued_get_discovery_client_docs() {
  $docs = &drupal_static(__FUNCTION__);

  if (!isset($docs)) {
    $client = rescued_get_xtuple_rest_service();
    $docs["xtuple"] = $client->discovery();
    try {
      $dir = "public://schemas";
      if (file_prepare_directory($dir, FILE_MODIFY_PERMISSIONS | FILE_CREATE_DIRECTORY)) {
        foreach ($docs["xtuple"]["schemas"] as $resource => $schema) {
          $file = fopen("$dir/$resource.php", "w");
          $export = var_export($schema, TRUE);
          $export = str_replace("array (", "[", $export);
          $export = str_replace(")", "]", $export);
          $export = preg_replace("/=>\\ *\n\\ *\\[/", "=> [", $export);
          $export = str_replace("\$ref", "\\\$ref", $export);
          $export = str_replace("'", "\"", $export);
          $export = str_replace("true", "TRUE", $export);
          $export = str_replace("false", "FALSE", $export);
          $export = str_replace("null", "NULL", $export);
          fwrite($file, "<?php\n\n$export\n");
          fclose($file);
        }
      }
    } catch (\Exception $e) {
      watchdog_exception("rescued", $e);
    }
  }
  return $docs;
}

/**
 * Implements hook_flush_caches().
 *
 * Remove the folder at: /tmp/Google_Client and reset our entities loaded
 * variable and cache. This will be called when hook_menu() is called above
 * in rescued_module_implements_alter() and when all caches are flushed.
 */
function rescued_flush_caches() {
  if (variable_get('rescued_clear_google_cache', 1)) {
    global $apiConfig;
    if (file_exists($apiConfig['ioFileCache_directory'])) {
      file_unmanaged_delete_recursive($apiConfig['ioFileCache_directory']);
    }
  }
}

/**
 * Initialize a Rescued Client
 *
 * @return \Xtuple\Rescued\RescuedApiService
 * @throws \Exception
 */
function rescued_api_get_client() {
  $rescued = &drupal_static(__FUNCTION__);

  if (empty($rescued["xtuple"]["client"])) {
    $client = rescued_get_xtuple_rest_service();
    $rescued["xtuple"]["client"] = $client->service();
    $rescued["xtuple"]['prn'] = $client->config()->prn();
  }
  /** @var \Xtuple\Rescued\RescuedApiService $client */
  $client = $rescued["xtuple"]['client'];

  // Reset $oauth-prn because drupal_static's client may be stale.
  /** @var \Google_OAuth2 $auth */
  $auth = $client->client->getAuth();
  $oauth = $auth->assertionCredentials;

  if (isset($rescued["xtuple"]['prn'])) {
    $prn = $rescued["xtuple"]['prn'];
  }

  /** @var Xtuple\Xdruple\Session\RescuedSession $session */
  global $session;
  $oauth_user = NULL;

  // Set OAuth 2.0 JWT Delegated user.
  if ($role_user = $session->getRescued('user')) {
    if ((isset($_SESSION['oauth_user']) && $_SESSION['oauth_user'] !== $role_user) ||
      $oauth->prn !== $role_user
    ) {
      $oauth->prn = $role_user;
      $oauth_user = $role_user;
    }
  }
  elseif (isset($prn)) {
    if ((isset($_SESSION['oauth_user']) && $_SESSION['oauth_user'] !== $prn) ||
      $oauth->prn !== $prn
    ) {
      $oauth->prn = $prn;
      $oauth_user = $prn;
    }
  }

  // Reset AssertionCredentials so cached client has correct prn username and access token.
  if ($oauth_user !== NULL) {
    unset($_SESSION['access_token']);
    unset($_SESSION['oauth_user']);
    $auth->token = NULL;
    $_SESSION['oauth_user'] = $oauth_user;
    $client->client->setAssertionCredentials($oauth);
  }

  return $client;
}

/**
 * Implements hook_features_exclude()
 */
function rescued_features_exclude() {
  return [
    'variable' => [
      'rescued_debug_mode',
    ],
  ];
}
